# New Start: A modern Arch workflow built with an emphasis on functionality.
# Copyright (C) 2017-2018 Donovan Glover

# Reload sxhkd / Quit bspwm
super + {_, alt} + Escape
  {pkill -USR1 -x sxhkd && notify-send -t 2000 "sxhkd" "Reloaded config",bspc quit}

super + d
  libinput-gestures-setup restart && notify-send -t 2000 "libinput-gestures" "Reloaded config"

# Dynamically adjust gaps of current desktop
super + {_, shift +} g
    { bspc config -d focused window_gap $(( $(bspc config -d focused window_gap) + 10 )), \
    [ $(bspc config -d focused window_gap) -ge 20 ] && \
    bspc config -d focused window_gap $(( $(bspc config -d focused window_gap) - 10 )) }

# Dynamically adjust borders of nodes on current desktop
super + {_, shift +} i
    { bspc config -d focused border_width $(( $(bspc config -d focused border_width) + 1 )), \
    [ $(bspc config -d focused border_width) -ge 1 ] && \
    bspc config -d focused border_width $(( $(bspc config -d focused border_width) - 1 )) }

# Take a screenshot
super + p
  ~/.config/sxhkd/screenshot.sh

# Screenshot a selection
super + {shift,alt} + p
  ~/.config/sxhkd/selection.sh {_,clipboard}

# Open a new terminal window
super + {_,shift} + Return
  kitty --single-instance {_,--name floating}

# Toggle a dropdown terminal
super + backslash
  ~/.config/sxhkd/dropdown.sh

# toggle polybar: top_padding depends on the height you set in polybar/config
super + o
  (xdotool search --class --onlyvisible "Polybar" && \
    (xdo hide -N "Polybar" && bspc config top_padding 0)) || \
    (xdo show -N "Polybar" && bspc config top_padding $(cat ~/.cache/polybar/bspwm_top_padding))

# Change the wal color scheme
super + m
  wal -o ~/.config/wal/done.sh --theme random_dark

super + z
  ~/.config/rofi/launch.sh

# ====================
# ======= Node =======
# ====================

# Close the focused window
super + {_,shift} + q
  bspc node -{c,k}

# Switch to / Swap with the node in the specified direction
super + {_,shift} + {h,j,k,l}
  bspc node -{f,s} {west,south,north,east}

# FLAGS: Toggle between node flags
super + {x,y}
  bspc node -g {sticky,private}

# FLAGS: Push and pop windows from the hidden stack
super + {_,shift} + b
  bspc node {-g hidden,$(bspc query -N -n .hidden | tail -n 1) -g hidden=off}

# STATES: Toggle between node states
super + {t,w,f,space}
  bspc node focused -t ~{tiled,pseudo_tiled,fullscreen,floating}

# PRESELECT: The direction to create a new node
super + ctrl + {h,j,k,l,space}
  bspc node -p {west,south,north,east,cancel}

# RATIO: The size of a new node
super + ctrl + {1-9}
  bspc node -o 0.{1-9}

# =======================
# ======= Desktop =======
# =======================

# Focus a certain desktop / Send a node to a certain desktop
super + {_,shift} + {1-9,0}
  bspc {desktop -f,node -d} '^{1-9,10}'

# Move to the next desktop on the current monitor
super + {_, shift} + Tab
  bspc desktop -f {next,prev}.local.occupied

# Easily go back and forth between the last desktop used
super + a
  bspc desktop -f last

# Switch between tiled and monocle desktop layouts
super + c
  bspc desktop -l next

# =======================
# ======= fn keys =======
# =======================

super + F1
  pactl set-sink-mute @DEFAULT_SINK@ toggle && notify-send -t 2000 "Changed muted to" "$(pamixer --get-mute)"

super + F2
  pamixer -d 5 && notify-send -t 2000 "Lowered volume to" "$(pamixer --get-volume)%"

super + F3
  pamixer -i 5 && notify-send -t 2000 "Raised volume to" "$(pamixer --get-volume)%"

super + F4
  pactl set-source-mute @DEFAULT_SOURCE@ toggle

super + F5
  brightnessctl set 5%- && notify-send -t 2000 "Decreased brightness to" "$(brightnessctl get)"

super + F6
  brightnessctl set +5% && notify-send -t 2000 "Increased brightness to" "$(brightnessctl get)"

super + F7
  playerctl -p mpv previous && notify-send -t 2000 "Previous track" "$(playerctl -p mpv metadata xesam:title)"

super + F8
  playerctl -p mpv next && notify-send -t 2000 "Next track" "$(playerctl -p mpv metadata xesam:title)"

super + F9
  playerctl -p mpv play-pause && notify-send -t 2000 "mpv" "$(playerctl -p mpv status)"

super + F10
  playerctl -p mpv position "5-" && notify-send -t 2000 "Minus 5 seconds" "$(playerctl -p mpv position)"

super + F11
  playerctl -p mpv position "5+" && notify-send -t 2000 "Plus 5 seconds" "$(playerctl -p mpv position)"

# vim:ft=sxhkdrc
